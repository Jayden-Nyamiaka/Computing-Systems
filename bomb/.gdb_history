p *(char $rdx
p *(char *)$rdx
p/x *(char *)$rdx
p/x *(char *)$rdx
si
si
si
si
si
p/x *(char *)$r8
p/x *(char *)$rdx
p/x *(char *)$rcx
p/x *(char *)$r8
p/x *(char *)$r9
p/x (char *)$rdx
p/x (char *)$rcx
p/x (char *)$r8
p *(char *)$r8
p *(char *)$rdx
p *(char *)$rcx
p *(char *)$r9
p *(char *)$r10
p *(char *)$r11
si
si
so
si
si
finish
si
si
p *(char *)$eax
p $eax
si
si
si
p *(char*)$rsp
p/x *(char*)$rsp
p/x $rsp
dashboard memory watch $rsp-64 128
si
si
si
si
si
p/x $eax
p/x $ebx
si
p/x $eax
p ($rsp, $rbx, 4)
si
si
p ($rsp + 4*$rbx - 4)
p $rsp
p $rbx

p $rbx
p $rsp
si
si
si
si
si
si
si
si
si
finish
p *(char *)$rsp
si
si
si
p *(char *)$ebx
p (char *)$ebx
p $ebx
si
si
si
si
si
run
si
si
si
si
finish
p *(char *)$rsp
p *$rsp
p ($rsp)
info registers eflags
si
info registers eflags
p ($eax)
p *($eax)
p *(char *)$eax
p ($rsp)
p *($rsp)
p/x *($rsp)
p/x *(char *)($rsp)
p *(char *)$eax
p *(char *)($rsp)
q
run
si
so
si
si
so
si
finish
run
si
si
si
si
finish
p *(char *)($rsp)
si
si
p *(char *)($ebx)
p ($ebx)
p $ebx
p $rbx
si
p $ebx
p $rax
si
p $rax
si
p $rax
si
p $rax
si
p $rax
si
run
p $rsp
si
si
si
finish
p $rsp
run
run
si
si
si
s
run
si
si
si
si
finish
p $rsp
p *(char *)$rsp
p/x *(char *)$rsp
si
si
si
si
si
si
si
p $eax
run
run
si
su
si
si
si
finish
si
si
si
si
si
si
si
si
so
si
si
si
si
si
si
si
run
b explode_bomb
run
run 
b phase_3
run
si
si
si
si
si
si
finish
p $rax
si
sisi
si
si
p $rax
si
si
p *(char *)(rsp + 4)
p *(char *)($rsp + 4)
p *(char *)($rsp)
dashboard memory watch $rsp-64 128
p *(char *)($rsp + 4)
run 
si
si
si
si
p *(char *)($rsp + 4)
p *(char *)($rsp)
run
si
s
s
finish
si
si
si
s
cont
b phase_4
rm b 4
info break
del 2
info break
run decode_input.txt
run decode_input.txt
run
run
q
run
b explode_bomb
run
run decode_input.txt
run
run
run
run
run
run
run
run
run
q
